$date
2023-11-30T16:21+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module RegisterFile $end
 $var wire 5 ! io_read_address1 $end
 $var wire 5 " io_read_address2 $end
 $var wire 5 # io_debug_read_address $end
 $var wire 32 $ io_write_data $end
 $var wire 32 % registers_31 $end
 $var wire 32 & registers_30 $end
 $var wire 32 ' io_debug_read_data $end
 $var wire 5 ( io_write_address $end
 $var wire 32 ) registers_11 $end
 $var wire 32 * registers_10 $end
 $var wire 32 + registers_15 $end
 $var wire 32 , registers_14 $end
 $var wire 32 - registers_13 $end
 $var wire 32 . registers_12 $end
 $var wire 32 / registers_19 $end
 $var wire 32 0 registers_18 $end
 $var wire 32 1 registers_17 $end
 $var wire 32 2 registers_16 $end
 $var wire 32 3 registers_22 $end
 $var wire 32 4 registers_21 $end
 $var wire 32 5 registers_20 $end
 $var wire 32 6 registers_26 $end
 $var wire 32 7 registers_25 $end
 $var wire 32 8 registers_24 $end
 $var wire 32 9 registers_23 $end
 $var wire 32 : io_read_data1 $end
 $var wire 32 ; registers_29 $end
 $var wire 32 < registers_28 $end
 $var wire 32 = registers_27 $end
 $var wire 32 > io_read_data2 $end
 $var wire 32 ? registers_7 $end
 $var wire 32 @ registers_8 $end
 $var wire 32 A registers_9 $end
 $var wire 32 B registers_0 $end
 $var wire 1 C reset $end
 $var wire 32 D registers_1 $end
 $var wire 32 E registers_2 $end
 $var wire 32 F registers_3 $end
 $var wire 32 G registers_4 $end
 $var wire 32 H registers_5 $end
 $var wire 32 I registers_6 $end
 $var wire 1 J io_write_enable $end
 $var wire 1 K clock $end
$upscope $end
$enddefinitions $end
$dumpvars
b00000000000000000000000000000000 +
b00000000000000000000000000000000 *
b00000000000000000000000000000000 -
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 '
b00000000000000000000000000000000 &
b00000000000000000000000000000000 )
b00000000000000000000000000000000 %
b00000000000000000000000000000000 $
b00000 !
b00000 #
b00000000000000000000000000000000 ;
b00000 "
b00000000000000000000000000000000 :
b00000000000000000000000000000000 =
0C
b00000000000000000000000000000000 <
b00000000000000000000000000000000 7
b00000000000000000000000000000000 6
b00000000000000000000000000000000 9
b00000 (
b00000000000000000000000000000000 8
b00000000000000000000000000000000 3
b00000000000000000000000000000000 2
0J
b00000000000000000000000000000000 5
0K
b00000000000000000000000000000000 4
b00000000000000000000000000000000 /
b00000000000000000000000000000000 .
b00000000000000000000000000000000 1
b00000000000000000000000000000000 0
b00000000000000000000000000000000 G
b00000000000000000000000000000000 F
b00000000000000000000000000000000 I
b00000000000000000000000000000000 H
b00000000000000000000000000000000 B
b00000000000000000000000000000000 E
b00000000000000000000000000000000 D
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 >
b00000000000000000000000000000000 A
b00000000000000000000000000000000 @
$end
#0
1C
#1
1K
#6
0C
b11011110101011011011111011101111 $
b00001 (
1J
0K
#11
b11011110101011011011111011101111 D
1K
#16
b00000 !
b00000000000000000000000000000000 $
b00000 (
b11011110101011011011111011101111 :
0J
0K
